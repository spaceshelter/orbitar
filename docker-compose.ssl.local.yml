version: '3.9'

services:
  caddy:
    image: caddy
    restart: unless-stopped
    ports:
      - "443:443"
    environment:
      SERVER_DOMAIN: ${SERVER_DOMAIN}
      API_DOMAIN: ${API_DOMAIN}
      IMGUR_CLIENT_ID: ${IMGUR_CLIENT_ID}
    volumes:
      - $PWD/caddy/Caddyfile.ssl.local:/etc/caddy/Caddyfile:ro
      - $PWD/caddy/certs:/certs:ro
      - frontend_build:/srv:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend

  mysql:
    platform: linux/amd64
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_db:/var/lib/mysql
      - $PWD/mysql/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
        test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD}"]
        interval: 5s
        timeout: 20s
        retries: 10

  redis:
    image: redis:7
    restart: always
    command: redis-server --save 20 1 --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: redis-cli -a ${REDIS_PASSWORD} ping | grep PONG
      interval: 5s
      timeout: 20s
      retries: 10

  frontend:
    build:
      context: frontend
      args:
        NODE_ENV: production
        SERVER_DOMAIN: ${SERVER_DOMAIN}
        API_DOMAIN: ${API_DOMAIN}
    restart: "no"
    volumes:
      - frontend_build:/frontend

  backend:
    build:
      context: backend
    restart: always
    environment:
      SITE_DOMAIN: ${SERVER_DOMAIN}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SENDING_BLUE_API_KEY: ${SENDING_BLUE_API_KEY}
      DEEPL_API_KEY: ${DEEPL_API_KEY}
    depends_on:
      - mysql
      - redis
      - feed
      - elasticsearch-setup

  feed:
    build:
      context: feed
    restart: always

  elasticsearch:
    image: elasticsearch:7.17.8
    restart: always
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s -f http://localhost:9200/_cluster/health?wait_for_status=green >/dev/null || exit 1
      interval: 10s
      timeout: 30s
      retries: 10
    volumes:
      - elasticsearch_data:/usr/share/elastic-setup/data
      - $PWD/search/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro

  # performs initial setup of elasticsearch and exits
  elasticsearch-setup:
    image: curlimages/curl
    restart: "no"
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - $PWD/search/setup.sh:/setup.sh:ro
    entrypoint: /bin/sh
    command: /setup.sh

  # performs periodic indexing of elasticsearch
  elasticsearch-indexer:
    build:
      context: search
    restart: always
    depends_on:
      mysql:
        condition: service_started # TODO change to service_healthy when we have a healthcheck (in dev branch)
      elasticsearch:
        condition: service_healthy
      elasticsearch-setup:
        condition: service_completed_successfully
      backend:
        condition: service_started # TODO change to service_healthy when we have a healthcheck

volumes:
  caddy_data:
  caddy_config:
  frontend_build:
  mysql_db:
  redis_data:
  elasticsearch_data:
